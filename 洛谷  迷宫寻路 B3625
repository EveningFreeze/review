#include <iostream> 
#include <cstring>  // 包含C风格字符串操作的头文件，这里用于memset函数
#include <queue>    // 包含队列的头文件，用于BFS算法

typedef std::pair<int, int> PII; // 定义一个类型别名，方便表示坐标对
using namespace std; 

const int N = 110; // 定义一个常量N，表示迷宫的最大尺寸，这里假设为110x110


int n, m; // 定义两个变量n和m，分别表示迷宫的行数和列数
char g[N][N]; // 定义一个二维字符数组g，用于存储迷宫的布局，'#'表示墙，'.'表示空地
int dist[N][N]; // 定义一个二维整数数组dist，用于存储从起点到每个点的距离
queue<PII> q; // 定义一个队列q，用于BFS算法中存储待访问的点


int dx[] = { -1, 0, 1, 0 }; // 定义四个方向的x坐标变化量，分别对应上、右、下、左
int dy[] = { 0, 1, 0, -1 }; 


// BFS函数，参数x1, y1表示起点的坐标
int bfs(int x1, int y1)
{
    memset(dist, -1, sizeof dist); // 将dist数组初始化为-1，表示未访问
    q.push({ x1, y1 }); // 将起点加入队列
    dist[x1][y1] = 0; // 起点到起点的距离为0

    while (!q.empty()) // 当队列不为空时循环
    {
        PII t = q.front(); // 获取队列的第一个元素
        q.pop(); // 将该元素从队列中移除
        for (int i = 0; i < 4; i++) // 遍历四个方向
        {
            int a = t.first + dx[i], b = t.second + dy[i]; // 计算新坐标

            if (a < 1 || a > n || b < 1 || b > m) continue; // 如果新坐标超出迷宫范围，跳过
            if (g[a][b] != '.') continue; // 如果新坐标是墙，跳过
            if (dist[a][b] >= 0) continue; // 如果新坐标已经被访问过，跳过

            q.push({ a, b }); // 将新坐标加入队列
            dist[a][b] = dist[t.first][t.second] + 1; // 更新新坐标到起点的距离
            if (a == n && b == m) return 1; // 如果到达终点，返回1
        }
    }
    return 0; // 如果遍历完所有点仍未到达终点，返回0
}

int main() 
{
    cin >> n >> m; // 输入迷宫的行数和列数
    for (int i = 1; i <= n; i++) // 输入迷宫的布局
    {
        for (int j = 1; j <= m; j++)
        {
            cin >> g[i][j]; // 将输入的字符存入g数组
        }
    }
    int res = bfs(1, 1); // 调用bfs函数，从(1,1)开始搜索
    if (res) // 如果能够到达终点
        cout << "Yes" << endl; // 输出"Yes"
    else
        cout << "No" << endl; // 否则输出"No"

    return 0; 
}
