#include<iostream>
#include<algorithm>
#include<cstring>
#include<cmath>  // 引入数学函数库，用于使用pow函数计算幂运算
using namespace std;

int n;  

// 函数cal用于将输入的整数n按照2的幂次方形式进行分解并输出
void cal(int n) 
{
    // 从2的14次方开始，逐步递减尝试找到能组成n的2的幂次方
    for (int i = 14; i >= 0; i--) 
    {  
        // 判断当前的2的i次方是否小于等于待分解的整数n
        if (pow(2, i) <= n) 
        {  
            // 如果i等于0，说明找到了2的0次方，直接输出"2(0)"
            if (i == 0) cout << "2(0)";  
            // 如果i等于1，说明找到了2的1次方，直接输出"2"
            else if (i == 1) cout << "2";  
            // 如果i大于1，说明找到了2的i次方（i > 1），需要进一步分解i
            else 
            {  
                // 先输出"2("，表示开始一个新的幂次方层级
                cout << "2(";  
                // 递归调用cal函数来分解i，将i按照同样的规则分解为2的幂次方形式
                cal(i);  
                // 递归调用结束后，输出")"，完成当前幂次方层级的表示
                cout << ")";  
            }

            // 将n减去已经找到的2的i次方，以便继续寻找剩下的部分能由哪些2的幂次方组成
            n -= pow(2, i);  
            // 如果n还不为0，说明还有剩余部分需要继续分解并输出，此时输出"+"用于连接后续的分解结果
            if (n!= 0) cout << "+";  
        }
    }
}

int main()
{
    // 从标准输入读取一个整数，赋值给n
    cin >> n;  
    // 调用cal函数对读取到的整数n进行分解并按照要求输出
    cal(n);  
    return 0;
}
