//1.输入a,b,ai[i],bi[i]
//2.BFS
//  对于一个状态a,通过ai,找到这个状态的可达状态
//  将可达状态及当前的步数push入队列
//  直到找到状态b,或者步数达到10步
//3.记录，找到第一次找到状态b的步数并输出
//4.---
#include <iostream> 
#include<algorithm> 
#include<cstring> 
#include<queue> // 包含队列的头文件，用于广度优先搜索
#include<string> 

using namespace std; 

const int N = 10; // 定义一个常量N，表示最多处理10条变换规则
string ai[N], bi[N]; // 定义两个字符串数组，分别存储变换规则的左侧和右侧

struct point { // 定义一个结构体，用于存储广度优先搜索中的节点信息
    string s; // 存储当前的字符串状态
    int step; // 存储到达当前状态所需的变换步数
};

int main() 
{
    string a, b; // 定义两个字符串变量，分别存储初始字符串和目标字符串
    cin >> a >> b; // 从标准输入读取初始字符串和目标字符串

    int t = 0; // 定义一个变量t，用于记录输入的变换规则数量
    while (cin >> ai[t] >> bi[t] && t < N) t++; // 循环读取变换规则，直到读取N个或到达输入末尾

    queue<point>q; // 定义一个队列q，用于广度优先搜索
    q.push({ a, 0 }); // 将初始字符串和步数0加入队列

    while (!q.empty())// 只要队列不为空，就继续循环
    { 
        point p = q.front(); // 获取队列的第一个元素
        q.pop(); // 将该元素从队列中移除

        if (p.step == 10) continue; // 如果已经进行了10步变换，跳过当前循环，因为题目要求最多10步

        for (int i = 0; i < t; i++) // 遍历所有变换规则
        { 
            int mark = p.s.find(ai[i]); // 在当前字符串中查找规则左侧的子串
            while (mark != -1)// 如果找到了子串
            { 
                string ts = p.s; // 创建一个新的字符串副本，用于应用变换
                ts.replace(mark, ai[i].size(), bi[i]); // 应用变换规则，将子串替换为规则右侧的字符串
                if (ts == b)// 如果变换后的字符串与目标字符串相同
                { 
                    cout << p.step + 1; // 输出最少变换步数（因为步数从0开始计数，所以加1）
                    return 0; // 程序结束
                }
                q.push({ ts, p.step + 1 }); // 将新生成的字符串和步数加入队列，继续搜索
                mark = p.s.find(ai[i], mark + 1); // 继续查找下一个匹配的子串
            }
        }
    }
    cout << "NO ANSWER!"; // 如果队列空了还没有找到答案，则输出"NO ANSWER!"
    return 0;
}
