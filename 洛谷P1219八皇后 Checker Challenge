#include<iostream>
using namespace std;

int answer = 0; // 记录解的总数
int ROW[14];    // 记录每行的棋子所在的列
int COL[14];    // 记录每列是否已经有棋子
int a[27];      // 记录对角线 i + j 是否已经有棋子
int b[27];      // 记录对角线 i - j + n 是否已经有棋子
int n;          // 棋盘的大小

// 输出解的函数
void find()
{
    // 如果解的总数小于等于2，则输出当前解
    if (answer <= 2)
    {
        for (int i = 1; i <= n; i++)
        {
            cout << ROW[i] << " ";
        }
        cout << endl;
    }
    answer++; // 解的总数加1
}

// 深度优先搜索函数
void dfs(int i) 
{
    // 如果已经放置了 n 个棋子，则找到一个解
    if (i > n) 
    {
        find(); // 输出当前解
        return;
    } 
   else
    {
        // 尝试在第 i 行的每一列放置棋子
        for (int j = 1; j <= n; j++)
         {
            // 检查当前列和对角线是否已经有棋子
            if (!COL[j] && !a[i + j] && !b[i - j + n])
             {
                ROW[i] = j; // 在第 i 行的第 j 列放置棋子
                COL[j] = 1; // 标记第 j 列已经有棋子
                a[i + j] = 1; // 标记对角线 i + j 已经有棋子
                b[i - j + n] = 1; // 标记对角线 i - j + n 已经有棋子
                dfs(i + 1); // 递归放置下一行的棋子
                // 回溯，恢复状态
                COL[j] = 0;
                a[i + j] = 0;
                b[i - j + n] = 0;
            }
        }
    }
}

int main() 
{
    cin >> n; // 输入棋盘的大小
    dfs(1); // 从第1行开始深度优先搜索
    cout << answer << endl; // 输出解的总数
    return 0;
}
