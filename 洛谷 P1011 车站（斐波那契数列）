#include<iostream>
#include<cstring>
#include<algorithm>
#include<cmath>
using namespace std;

// 初始化，第0站舍弃，这里分别定义了两个数组up和down用于存储相关人数信息
// up数组用于存储从第3站起每站上车的人数规律相关的值（初始值设置了前几站的情况）
// down数组用于存储从第3站起每站下车的人数规律相关的值（初始未赋值，后续会根据规律计算）
int up[30] = { 0,1,1,2 };
int down[30];

// 定义四个整数变量，分别用于存储始发站上车人数、车站数、终点站下车人数和所求的站点编号
int a, n, m, x;

int main()
{
    // 以下两行用于提高输入输出流的效率，使其与C风格的输入输出流同步方式进行调整
    // 这样可以加快cin和cout的执行速度，避免一些不必要的缓冲问题
    ios_base::sync_with_stdio(0);
    cin.tie(0), cout.tie(0);

    // 从标准输入读取四个整数，分别赋值给a、n、m、x
    // a表示始发站上车的人数
    // n表示车站的总数
    // m表示终点站下车的人数（也就是全部下车时的人数）
    // x表示我们要求的是哪一站开出时车上的人数
    cin >> a >> n >> m >> x;

    // 从第4站开始，根据题目给定的规律计算每站上车和下车的人数，并分别存储到up和down数组中
    // 对于up数组，规律是当前站上车人数等于前两站上车人数之和
    // 对于down数组，规律是当前站下车人数等于上一站上车人数
    for (int i = 4; i <= n - 1; i++) {
        up[i] = up[i - 1] + up[i - 2] - 1;
        down[i] = down[i - 1] + down[i - 2] + 1;
    }

    // 根据终点站下车人数m、始发站上车人数a以及通过前面循环计算得到的up[n - 1]（第n - 1站上车人数）
    // 计算出每站平均下车的人数each_down
    // 这里的计算思路是先算出除去始发站上车人数a后，剩下的人数（m - up[n - 1] * a）
    // 再除以总的下车人数规律之和down[n - 1]，得到每站平均下车人数
    int each_down = (m - up[n - 1] * a) / down[n - 1];

    // 最后根据前面计算得到的每站平均下车人数each_down、down[x]（第x站下车人数）
    // 以及up[x]（第x站上车人数）和始发站上车人数a，计算出x站开出时车上的人数
    // 计算思路是先算出x站下车后车上减少的人数（down[x] * each_down）
    // 再加上x站上车后车上增加的人数（up[x] * a），得到x站开出时车上的人数
    cout << down[x] * each_down + up[x] * a;

    return 0;
}
