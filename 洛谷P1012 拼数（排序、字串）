#include<iostream>
#include<algorithm>
#include<cstring>

using namespace std;

// 定义一个全局变量n，用于存储输入的正整数的个数
int n;

// 定义一个字符串数组arr，用于存储输入的各个正整数转换后的字符串形式
// 这里数组大小设定为20，表示最多可以处理20个正整数
string arr[20];

// 自定义比较函数cmp，用于比较两个字符串按照特定规则拼接后的大小关系
// 该函数接受两个常量引用类型的字符串参数a和b
// 此比较函数的作用是确定在排序过程中两个字符串的先后顺序，以便将输入的正整数
// 转换后的字符串按照能拼接成最大整数的顺序进行排列
bool cmp(const string& a, const string& b)
{
    // 通过比较将字符串a和b按照不同顺序拼接后的结果
    // 如果a与b拼接后的字符串（a + b）大于b与a拼接后的字符串（b + a），
    // 则说明将a放在前面与其他字符串依次拼接后，更有可能组成更大的整数，所以返回true
    // 例如，若a为"3"，b为"30"，那么a + b为"330"，b + a为"303"，此时a + b > b + a，
    // 所以在排序时应将a排在b前面
    return a + b > b + a;
}

int main()
{
    // 从标准输入读取一个整数，将其赋值给变量n，这个整数表示接下来要输入的正整数的个数
    cin >> n;

    // 通过循环，依次从标准输入读取n个正整数，并将每个正整数转换为字符串形式后存储到数组arr中
    for (int i = 0; i < n; i++)
    {
        // 每次循环从标准输入读取一个正整数，并将其存储到数组arr的第i个位置
        // 这里自动将读取的正整数转换为字符串形式进行存储
        cin >> arr[i];
    }

    // 使用自定义的比较函数cmp对字符串数组arr进行排序
    // 排序的目的是将数组中的字符串按照能够拼接成最大整数的顺序进行排列
    // 经过排序后，当按照顺序将这些字符串依次拼接起来时，就能得到最大的整数
    sort(arr, arr + n, cmp);

    // 通过循环，依次输出排序后的字符串数组arr中的每个字符串
    // 这些字符串依次拼接起来就构成了根据题目要求所组成的最大整数
    for (int i = 0; i < n; i++)
    {
        cout << arr[i];
    }

    // 输出一个换行符，使输出的格式更加规范，符合一般的输出习惯
    cout << endl;

    // 返回0，表示程序正常结束
    return 0;
}
