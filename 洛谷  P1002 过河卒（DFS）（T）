#include<iostream>
#include<algorithm>
#include<cstring>

using namespace std;

int n, m, x1, y1, ans = 0;

// 马的8个可能移动方向
int dir[8][2] = { {-1,-2},{-2,-1},{-2,1},{-1,2},{1,2},{2,1},{2,-1},{1,-2} };

// 卒的2个可能移动方向：向下和向右
int dr[2][2] = { {1,0},{0,1} };

// 检查是否走过的标记数组
int vis[30][30];//1表示走过，0表示未走过

// 检查坐标 (xx, yy) 是否在棋盘范围内且未被访问过
int check(int xx, int yy)
{
    if (xx >= 0 && xx <= n && yy >= 0 && yy <= m && vis[xx][yy] == 0)
        return 1;
    return 0;
}

// 深度优先搜索函数
void dfs(int x, int y)
{
    // 如果到达目标点 (n, m)，则路径条数加一
    if (x == n && y == m)
    {
        ans++;
        return;
    }

    // 尝试向下或向右移动
    for (int i = 0; i < 2; i++)
    {
        int xx = x + dr[i][0];
        int yy = y + dr[i][1];

        // 检查新位置是否合法
        if (check(xx, yy))
        {
            // 标记新位置为已访问
            vis[xx][yy] = 1;

            // 递归搜索新位置
            dfs(xx, yy);

            // 回溯，取消标记
            vis[xx][yy] = 0;
        }
    }
}

int main()
{
    // 输入目标点坐标 (n, m) 和马的坐标 (x1, y1)
    cin >> n >> m >> x1 >> y1;

    // 标记马的控制点
    for (int i = 0; i < 8; i++)
    {
        int xx = x1 + dir[i][0];
        int yy = y1 + dir[i][1];

        // 检查马的控制点是否在棋盘范围内且未被访问过
        if (xx >= 0 && xx <= n && yy >= 0 && yy <= m && vis[xx][yy] == 0)
        {
            vis[xx][yy] = 1;
        }
    }

    // 标记马的位置为已访问
    vis[x1][y1] = 1;

    // 标记起点 (0, 0) 为已访问
    vis[0][0] = 1;

    // 从起点 (0, 0) 开始深度优先搜索
    dfs(0, 0);

    // 输出路径条数
    cout << ans;

    return 0;
}
