#include<iostream>
#include<algorithm>
#include<cstring>
#include<queue>

using namespace std;

// 定义一个结构体来存储迷宫中的节点信息
struct node {
	int x, y, step; // 分别表示节点的x坐标，y坐标和到达该节点的步数
};

int n, m; // 分别表示迷宫的行数和列数
char a[400][400], v[400][400]; // a数组用来存储迷宫的布局，v数组用来标记是否已经访问过
int dx[] = { -1,0,1,0 }; // 表示上下左右四个方向的x坐标变化
int dy[] = { 0,-1,0,1 }; // 表示上下左右四个方向的y坐标变化
queue<node>q; // 使用队列来实现广度优先搜索

int main()
{
	cin >> n >> m; // 输入迷宫的行数和列数
	for (int i = 1; i <= n; i++) 
	{
		for (int j = 1; j <= m; j++) 
		{
			cin >> a[i][j]; // 输入迷宫的每一行数据
		}
	}

	for (int i = 1; i <= n; i++) 
	{
		for (int j = 1; j <= m; j++)
		{
			if (a[i][j] == '@')// 如果找到起点
			{ 
				node p; // 创建一个节点结构体
				p.x = i, p.y = j; // 设置起点的坐标
				p.step = 0; // 起点到自身的步数为0
				v[i][j] = 1; // 标记起点为已访问
				q.push(p); // 将起点加入队列
				while (!q.empty()) // 当队列不为空时循环
				{ 
					node k = q.front(); // 取出队列的第一个元素
					q.pop(); // 将该元素从队列中移除
					if (a[k.x][k.y] == '=') // 如果当前节点是出口
					{ 
						cout << k.step << endl; // 输出到达出口的步数
						return 0; // 结束程序
					}
					else // 如果当前节点不是出口
					{ 
						for (int i = 0; i < 4; i++) // 遍历四个方向
						{ 
							int tx = k.x + dx[i]; // 计算新坐标
							int ty = k.y + dy[i];
							if (tx<1 || tx>n || ty<1 || ty>m) continue; // 如果新坐标超出迷宫范围则跳过
							if (a[tx][ty] == '#') continue; // 如果新坐标是玉米地（不可通过）则跳过
							if (v[tx][ty] == 1) continue; // 如果新坐标已经被访问过则跳过

							if (a[tx][ty] >= 'A' && a[tx][ty] <= 'Z')// 如果新坐标是滑梯的一端
							{ 
								for (int i = 1; i <= n; i++)// 遍历迷宫的所有行
								{ 
									for (int j = 1; j <= m; j++) // 遍历迷宫的所有列
									{ 
										if (a[i][j] == a[tx][ty] && (tx != i || ty != j)) // 如果找到滑梯的另一端并且不是当前节点
										{
											node s; // 创建一个节点结构体
											s.x = i; // 设置滑梯另一端的坐标
											s.y = j;
											s.step = k.step + 1; // 滑梯不需要步数，所以步数加1
											q.push(s); // 将滑梯另一端加入队列
										}
									}
								}
							}
							else// 如果新坐标是草地
							{ 
								node f; // 创建一个节点结构体
								f.x = tx, f.y = ty; // 设置新坐标
								v[tx][ty] = 1; // 标记新坐标为已访问
								f.step = k.step + 1; // 步数加1
								q.push(f); // 将新坐标加入队列
							}
						}
					}
				}
			}
		}
	}
	return 0; // 如果没有找到出口，则结束程序
}
