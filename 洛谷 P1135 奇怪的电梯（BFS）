#include <iostream>
#include<algorithm>
#include<cstring>
#include<vector>
#include<queue>

using namespace std;
const int N = 205;   // 定义一个常量N，表示最大楼层数

struct node 
{
	int floor; // 到达的楼层
	int cnt;   // 按键数，表示从起始楼层到达当前楼层所需的最少按键次数
};

queue<node>q; // 定义一个队列q，用于广度优先搜索（BFS）
int vis[250]; // 定义一个访问标记数组vis，用于记录每个楼层是否已经被访问过，避免重复访问
int k[300];   // 定义一个数组k，用于存储每个楼层的特定属性，即电梯在该楼层可以上下移动的楼层数

int main() 
{
	int n, a, b; // 定义变量n（楼层总数），a（起始楼层），b（目标楼层）
	cin >> n >> a >> b; // 从输入中读取n、a、b的值
	for (int i = 1; i <= n; i++)  // 循环读取每个楼层的属性
	{
		cin >> k[i]; // 读取第i层楼的属性，即电梯在该楼层可以上下移动的楼层数
	}

	q.push(node{ a, 0 }); // 将起始楼层a和初始按键次数0加入队列
	vis[a] = 1;           // 标记起始楼层a为已访问

	node top; // 定义一个node类型的变量top，用于存储队列中的节点
	while (q.size())
	{ 
		// 当队列不为空时，执行循环
		top = q.front(); // 获取队列的第一个元素
		q.pop();        // 将该元素从队列中移除

		if (top.floor == b)  // 如果当前楼层是目标楼层b
		{
			break; // 跳出循环，因为已经找到目标楼层
		}

		for (int i = -1; i <= 1; i += 2) // 循环尝试上下楼操作
		{ 
			int dist = top.floor + i * k[top.floor]; // 计算新楼层，i为-1或1，表示上下楼操作
			if (dist > 0 && dist <= n && vis[dist] == 0) // 如果新楼层在有效范围内且未被访问过
			{ 
				vis[dist] = 1; // 标记新楼层为已访问
				q.push(node{ dist, top.cnt + 1 }); // 将新楼层和对应的按键次数加入队列
			}
		}
	}
	if (top.floor == b) // 如果找到目标楼层
	{ 
		cout << top.cnt << endl; // 输出到达目标楼层所需的最少按键次数
	}
	else // 如果没有找到目标楼层
	{ 
		cout << "-1" << endl; // 输出-1，表示无法到达目标楼层
	}
	return 0;
}
