#include<iostream>
#include<algorithm>
#include<cstring>
#include<queue>

using namespace std;

#define x first
#define y second
const int N = 510; // 矩阵的最大尺寸
typedef std::pair<int, int> PII; // 定义一个 pair 类型，用于存储坐标 (x, y)

int n, m, a, b; // n 行 m 列的矩阵，a 个感染源，b 个领主
int dist[N][N]; // 记录从感染源到每个点的最短时间
queue<PII> q; // 用于 BFS 的队列

// 方向数组，表示四个方向的移动
int dx[] = { -1, 0, 1, 0 };
int dy[] = { 0, 1, 0, -1 };

// BFS 函数，计算从所有感染源到每个点的最短时间
void bfs()
{
    while (!q.empty()) // 当队列不为空时，继续 BFS
    {
        auto t = q.front(); // 取出队首元素
        q.pop(); // 弹出队首元素
        for (int i = 0; i < 4; i++) // 遍历四个方向
        {
            int a = t.x + dx[i]; // 计算新的 x 坐标
            int b = t.y + dy[i]; // 计算新的 y 坐标
            if (a < 1 || a > n || b < 1 || b > m) continue; // 如果新坐标超出矩阵范围，跳过
            if (dist[a][b] >= 0) continue; // 如果新坐标已经被访问过，跳过

            dist[a][b] = dist[t.x][t.y] + 1; // 更新新坐标的时间
            q.push({ a, b }); // 将新坐标入队
        }
    }
}

int main()
{
    cin >> n >> m >> a >> b; // 输入矩阵的行数、列数、感染源数量和领主数量
    memset(dist, -1, sizeof dist); // 初始化 dist 数组为 -1，表示未访问过

    // 读取感染源的位置，并将其入队
    while (a--)
    {
        int x, y;
        cin >> x >> y;
        q.push({ x, y });
        dist[x][y] = 0; // 感染源的时间为 0
    }

    bfs(); // 调用 BFS 函数计算最短时间

    // 读取领主的位置，并输出其感染时间
    while (b--)
    {
        int x, y;
        cin >> x >> y;
        printf("%d\n", dist[x][y]);
    }

    return 0;
}
