#include<iostream>
#include<algorithm>
#include<cstring>
#include<deque>

// 定义一个常量N，用于表示棋盘的最大尺寸
const int N = 510;
// 定义一个类型别名PII，它是一个pair<int, int>类型，方便表示坐标等二维信息
typedef std::pair<int, int> PII;

using namespace std;

// 全局变量，用于存储棋盘的行数和列数
int n, m;
// 二维字符数组，用于存储棋盘的布局，每个元素表示一个格子的类型（#或@）
char g[N][N];
// 用于存储起始位置的坐标
int x1, y1;
// 用于存储目标位置的坐标
int x2, y2;
// 定义一个双端队列，用于存储待探索的位置信息，元素类型为PII（即坐标对）
deque<PII> q;
// 二维数组，用于存储从起始位置到每个位置的最小花费，初始值设为 -1 表示未访问过
int dist[N][N];

// 定义四个方向的偏移量数组，分别表示向上、左、下、右四个方向在横坐标上的偏移量
int dx[] = { -1, 0, 1, 0 };
// 定义四个方向的偏移量数组，分别表示向上、左、下、右四个方向在纵坐标上的偏移量
int dy[] = { 0, -1, 0, 1 };

// 广度优先搜索函数，用于计算从给定起始位置(x, y)到目标位置的最小花费
int bfs(int x, int y)
{
    // 将起始位置加入队列q
    q.push_back({ x, y });
    // 将起始位置到自身的花费设为0
    dist[x][y] = 0;

    // 只要队列不为空，就继续进行广度优先搜索
    while (q.size())
    {
        // 取出队列头部的位置信息
        auto t = q.front();
        q.pop_front();
        // 获取当前位置的格子类型
        char ch = g[t.first][t.second];

        // 遍历四个方向
        for (int i = 0; i < 4; i++)
        {
            // 计算在当前方向上移动一格后的新位置的横坐标
            int a = t.first + dx[i];
            // 计算在当前方向上移动一格后的新位置的纵坐标
            int b = t.second + dy[i];

            // 判断新位置是否越界，如果越界则跳过此次循环
            if (a < 0 || a >= n || b < 0 || b >= m) continue;
            // 判断新位置是否已经访问过，如果已经访问过则跳过此次循环
            if (dist[a][b] != -1) continue;

            // 如果新位置的格子类型与当前位置相同
            if (g[a][b] == ch) 
            {
                // 则从起始位置到新位置的花费与到当前位置的花费相同
                dist[a][b] = dist[t.first][t.second];
                // 将新位置加入队列头部，因为相同类型格子移动花费为0，优先探索这类路径
                q.push_front({ a, b });
            }
            else
            {
                // 如果新位置的格子类型与当前位置不同
                // 则从起始位置到新位置的花费比到当前位置的花费多1
                dist[a][b] = dist[t.first][t.second] + 1;
                // 将新位置加入队列尾部
                q.push_back({ a, b });
            }

            // 如果新位置就是目标位置，返回从起始位置到目标位置的最小花费
            if (a == x2 && b == y2) return dist[x2][y2];
        }
    }

    // 如果无法到达目标位置，返回 -1
    return -1;
}

int main()
{
    // 循环读取输入，只要输入的n和m不全为0，就继续处理每组数据
    while (cin >> n >> m && (n != 0 || m != 0))
    {
        // 读取棋盘的每一行信息
        for (int i = 0; i < n; i++)
        {
            cin >> g[i];
        }

        // 初始化dist数组，将所有元素设为 -1，表示所有位置初始时都未访问过
        memset(dist, -1, sizeof dist);
        // 清空队列q，为处理下一组数据做准备
        q.clear();

        // 读取起始位置和目标位置的坐标
        cin >> x1 >> y1 >> x2 >> y2;

        // 调用bfs函数计算从起始位置到目标位置的最小花费，并将结果存储在res中
        int res = bfs(x1, y1);
        // 输出从起始位置到目标位置的最小花费
        cout << res << endl;
    }

    return 0;
}
