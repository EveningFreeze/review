#include <iostream>  
#include <algorithm>  
#include <cstring>  
#include <cmath>  // 引入数学函数库，用于调用sqrt等数学运算函数
#include <limits>  // 引入该头文件用于获取各种数据类型的极限值，此处用于获取双精度浮点数的最大值

using namespace std;

int n;  // 用于记录奶酪的数量，由用户输入获取
// ans用于记录老鼠吃完所有奶酪所跑的最少距离，初始化为双精度浮点数所能表示的最大值
double ans = std::numeric_limits<double>::max();
// f数组用于记忆化搜索，f[i][j]表示当前在第i个奶酪位置，已经访问过的奶酪状态为j时的最短距离，初始化为0
double f[16][33000] = { 0 };

// 定义结构体point，表示一个点（在这里代表奶酪的位置以及相关属性）
struct point {
    double x, y;  // 点的横纵坐标，用于表示奶酪在平面中的位置
    bool visit;  // 标记该奶酪是否已经被访问过，初始化为false（0）
    int num;  // 用于记录该奶酪的编号，方便后续操作中区分不同的奶酪
} ps[16];  // 定义一个包含16个point结构体的数组，用于存储所有奶酪的信息，假设奶酪数量不超过16个

// 函数dis用于计算两个点（奶酪）之间的欧几里得距离
double dis(point p1, point p2)
{
    // 根据平面两点间距离公式，计算并返回两点间的距离，使用sqrt函数求平方根
    return sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));
}

// dfs函数使用深度优先搜索的方式来遍历所有可能的吃奶酪顺序，寻找最短距离
void dfs(point p, int step, int mark, double s)
{
    // step表示已经访问过的奶酪数量，如果已经访问完所有n块奶酪（step == n）
    if (step == n) 
    {
        // 判断当前走过的距离s是否小于已记录的最短距离ans，如果是，则更新ans为新的更短距离
        if (ans > s) ans = s;
        return;  // 结束当前递归分支，回溯
    }

    // 遍历所有的奶酪（编号从0到n - 1），尝试下一个要去的奶酪位置
    for (int i = 0; i < n; i++)
    {
        // 如果当前奶酪已经被访问过了，跳过本次循环，继续尝试下一个奶酪
        if (ps[i].visit) continue;
        // 通过位运算更新当前已访问奶酪的状态标记，mark表示之前已经访问过的奶酪的状态，
        // 1 << i 表示将第i位设为1（代表即将访问第i个奶酪），然后通过按位或操作更新到mark中
        int tmp = mark | (1 << i);
        // 如果当前状态下到第i个奶酪的最短距离还未记录（f[i][tmp] == 0），
        // 或者当前记录的距离大于从之前位置p走到当前奶酪i的距离加上之前走过的距离s（即发现了更短的路径）
        if (f[i][tmp] == 0 || f[i][tmp] > f[p.num][mark] + dis(ps[i], p)) {
            // 更新当前状态下到第i个奶酪的最短距离
            f[i][tmp] = f[p.num][mark] + dis(ps[i], p);
            // 标记第i个奶酪为已访问
            ps[i].visit = 1;
            // 递归调用dfs，以当前奶酪i作为起点，继续探索下一个奶酪，step加1表示已访问奶酪数量增加，
            // tmp更新后的状态传递下去，s + dis(ps[i], p)表示累计走过的距离增加了从当前位置到下一个奶酪的距离
            dfs(ps[i], step + 1, tmp, s + dis(ps[i], p));
            // 回溯时，将第i个奶酪标记为未访问，以便后续其他路径探索时可以再次访问
            ps[i].visit = 0;
        }
    }
}

int main() 
{
    // 从标准输入读取奶酪的数量n
    cin >> n;
    // 循环读取每块奶酪的横纵坐标，并初始化其visit为false，num为对应的编号
    for (int i = 0; i < n; i++)
    {
        cin >> ps[i].x >> ps[i].y;
        ps[i].visit = 0;
        ps[i].num = i;
    }

    // 创建一个起始点p，坐标为(0, 0)，并标记为已访问（这里可能表示老鼠初始所在位置），编号设为1（具体编号意义可根据实际逻辑调整）
    point p = { 0, 0, 1 };

    // 以起始点p开始进行深度优先搜索，初始已访问奶酪数量为0，状态标记为0，走过的距离为0
    dfs(p, 0, 0, 0);
    // 按照保留两位小数的格式输出老鼠吃完所有奶酪所跑的最少距离
    printf("%.2lf", ans);
    return 0;  // 主函数结束，程序正常退出
}
