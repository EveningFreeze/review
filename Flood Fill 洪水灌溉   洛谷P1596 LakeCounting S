#include<iostream>
#include<algorithm>
#include<cstring>

using namespace std;

// 定义最大网格大小为101x101，以适应题目中1≤N≤100,1≤M≤100的要求
const int N = 101;
int n, m; // 定义n和m，分别代表网格的行数和列数
char g[N][N]; // 定义一个二维数组g，用于存储网格中的每个单元格的状态，'W'表示有水，'.'表示旱地
bool st[N][N]; // 定义一个二维布尔数组st，用于标记某个单元格是否已经被访问过，以避免重复计算水坑
int res = 0; // 定义一个整数res，用于存储水坑的总数

// 定义八个方向的偏移量，用于在深度优先搜索（DFS）中探索相邻的单元格
int dx[] = { 1,1,1,0,0,-1,-1,-1 };
int dy[] = { -1,0,1,1,-1,1,0,-1 };

// 定义DFS函数，用于从某个单元格开始探索与其相连的水单元格，形成一个水坑
void dfs(int x, int y) {
    for (int i = 0; i < 8; i++) {
        int a = x + dx[i], b = y + dy[i]; // 计算相邻单元格的坐标
        // 检查相邻单元格是否在网格内，且为水单元格，且未被访问过
        if (a < 0 || a >= n || b < 0 || b >= m || g[a][b] != 'W' || st[a][b]) continue;
        st[a][b] = true; // 标记相邻单元格为已访问
        dfs(a, b); // 递归探索相邻单元格
    }
}

int main() {
    cin >> n >> m; // 读取输入的网格行数和列数
    // 读取网格的每一行数据，存储到g数组中
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> g[i][j];
        }
    }
    // 遍历每个单元格，如果发现未被访问的水单元格，则从该单元格开始DFS，计算一个水坑，并增加水坑总数
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (g[i][j] == 'W' && !st[i][j]) {
                dfs(i, j); // 从当前单元格开始DFS
                res++; // 找到一个水坑，增加水坑总数
            }
        }
    }
    cout << res << endl; // 输出水坑的总数
    return 0;
}
