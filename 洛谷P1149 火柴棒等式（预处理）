#include<iostream>
#include<algorithm>
#include<cstring>
using namespace std;

const int N = 10010;
int n;    //用于存储输入的火柴棍总数
int arr[N];   //数组arr用于在深度优先搜素过程中存储尝试拼接的数字ABC等
int res = 0;   //用于记录满足条件的等式的数量

//数组sums用于存储数字0-9各自所需的火柴棍数量
int nums[10010] = { 6,2,5,5,5,4,5,6,3,7,6 };

//函数col用于计算一个整数x所需的火柴棍数量
int col(int x)
{
	if (nums[x])return nums[x];  //未经初始化的数组为0，如果nums[x]不为0，说明之前已经计算过数字x所需的火柴棍数量，直接返回即可
	else
	{
		int sumFire = 0;

		//通过循环，将整数x的每一位数字所需的火柴棍数量累加起来
		while (x)
		{
			sumFire += nums[x % 10];
			x /= 10;
		}
		//返回计算得到的整数x所需的火柴棍数量
		return sumFire;
	}
}

void dfs(int x, int sum)
{
	if (sum > n) return;   //如果当前已使用的火柴棍数量sum大于输入的火柴棍总数n，不符合要求，直接返回
	
	//当x>3时，说明已经尝试拼接出了三个数字（分别存储在arr[1]、arr[2]、arr[3]）
	if (x > 3)
	{
		if (arr[1] + arr[2] == arr[3] && sum == n)   //如果满足A+B=C且火柴棍数量正好等于输入的火柴棍总数
		{
			res++;    //则找到一个满足条件的等式，将结果数量res加1
		}
		//无论是否找到满足条件的等式，都要返回，继续尝试其他可能的数字组合
		return;
	}

	//循环尝试拼接不同的数字，这里的范围是0-1000，（克根据实际情况体调整范围）
	for (int i = 0; i <= 1000; i++)
	{
		arr[x] = i;  //将当前尝试的数字i存储到数组arr的第x个位置
		dfs(x + 1, sum + col(i));   //递归调用dfs函数，继续尝试下一个位置的数字拼接，并更新已使用的火柴棍数量
		arr[x] = 0;   //将数组arr的第x个位置重置为0，以便下一次尝试不同的数字
	}
}

int main()
{
	cin >> n;
	n -= 4;  //因为加号和等号各自需要两根火柴棍，所以要从总数n中减去这4根火柴棍
	dfs(1, 0);   //从第一个位置开始进行深度优先搜素，初始已使用的火柴棍数量sum为0
	cout << res;
	return 0;
}
