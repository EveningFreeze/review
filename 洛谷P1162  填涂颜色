#include<iostream>
#include<algorithm>
#include<cstring>
typedef std::pair<int, int> PII; // 定义一个pair类型，用于表示坐标点

using namespace std;
const int N = 31; // 定义最大棋盘大小
int g[N][N]; // 定义棋盘，存储每个格子的值
int n; // 定义棋盘的实际大小
PII q[N * N]; // 定义队列，存储BFS过程中的坐标点
bool st[N][N]; // 定义访问标记数组，记录每个格子是否被访问过

int dx[] = { -1, 0, 1, 0 }; // 定义四个方向的x坐标变化量
int dy[] = { 0, 1, 0, -1 }; // 定义四个方向的y坐标变化量

// BFS函数，从(x1, y1)点开始搜索
void bfs(int x1, int y1) 
{
    q[0] = { x1, y1 }; // 将起点加入队列
    st[x1][y1] = true; // 标记起点为已访问
    int hh = 0, tt = 0; // 定义队列的头和尾指针
    while (hh <= tt) { // 当队列不为空时
        auto t = q[hh++]; // 取出队列头部的点
        for (int i = 0; i < 4; i++) // 尝试四个方向的移动
        { 
            int a = t.first + dx[i]; // 计算新点的x坐标
            int b = t.second + dy[i]; // 计算新点的y坐标

            // 检查新点是否在棋盘内，是否为0（未访问的内部点），并且是否未被访问过
            if (a < 1 || a > n || b < 1 || b > n) continue; // 越界检查
            if (g[a][b] == 1) continue; // 如果是1（闭合圈边界），则跳过
            if (st[a][b]) continue; // 如果已经被访问过，跳过

            st[a][b] = true; // 标记新点为已访问
            q[++tt] = { a, b }; // 将新点加入队列
        }
    }
    return;
}

int main()
{
    cin >> n; // 输入棋盘大小
    for (int i = 1; i <= n; i++) { // 输入棋盘上的值
        for (int j = 1; j <= n; j++) {
            cin >> g[i][j];
        }
    }

    // 从棋盘的四个边界开始BFS，寻找所有可以到达边界的0
    for (int i = 1; i <= n; i++)
    {
        if (g[i][1] == 0 && !st[i][1]) bfs(i, 1); // 上边界
        if (g[i][n] == 0 && !st[i][n]) bfs(i, n); // 下边界
        if (g[1][i] == 0 && !st[1][i]) bfs(1, i); // 左边界
        if (g[n][i] == 0 && !st[n][i]) bfs(n, i); // 右边界
    }

    // 将所有未被访问的0（即闭合圈内的0）改为2
    for (int i = 1; i <= n; i++)
    {
        for (int j = 1; j <= n; j++) 
        {
            if (g[i][j] == 0 && !st[i][j])
            {
                g[i][j] = 2;
            }
        }
    }

    // 输出结果
    for (int i = 1; i <= n; i++) 
    {
        for (int j = 1; j <= n; j++) 
        {
            printf("%d ", g[i][j]); // 输出棋盘上的值
        }
        printf("\n"); // 每行输出后换行
    }
    return 0;
}
